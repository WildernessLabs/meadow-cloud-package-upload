name: 'Meadow.Cloud Package Upload'
description: 'Build and upload packages to Meadow.Cloud'
inputs:
  organization_id:
    description: 'Organization ID'
    required: true
  api_key:
    description: 'API Key'
    required: true
  os_version:
    description: 'OS Version'
    required: false
  cli_version:
    description: 'CLI Version'
    required: false
  configs:
    description: 'Key-value pairs used to replace *.yaml configs'
    required: false
    default: '{}'
  host:
    description: 'API URL'
    required: false
  project_path:
    description: 'Path to the project directory'
    required: true
branding:
  icon: 'cloud'
  color: 'white'
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Restore dependencies
      run: |
        cd ${{ inputs.project_path }}
        dotnet restore
      shell: bash
    - name: Build
      run: |
        cd ${{ inputs.project_path }}
        dotnet build --no-restore
      shell: bash
    - name: Test
      run: |
        cd ${{ inputs.project_path }}
        dotnet test --no-build --verbosity normal
      shell: bash
    - name: Install Meadow.CLI
      run: |
        cd ${{ inputs.project_path }}
        if [[ -n "${{ inputs.cli_version }}" ]]; then
          dotnet tool install WildernessLabs.Meadow.CLI --global --version "${{ inputs.cli_version }}"
        else
          dotnet tool install WildernessLabs.Meadow.CLI --global
        fi
      shell: bash
    - name: Install Firmware
      run: |
        cd ${{ inputs.project_path }}
        if [[ -n "${{ inputs.os_version }}" ]]; then
          meadow firmware download -v "${{ inputs.os_version }}"
          meadow firmware default "${{ inputs.os_version }}"
        else
          meadow firmware download
        fi
      shell: bash
    - name: Replace Environment Variables in YAML files
      run: |
        cd ${{ inputs.project_path }}
        # Convert the JSON string from configs input to environment variables
        CONFIGS_JSON='${{ inputs.configs }}'
        if [[ "$CONFIGS_JSON" != "{}" ]]; then
          echo "Configurations to process: $CONFIGS_JSON"
          
          # Use jq to parse JSON and replace in YAML files
          echo $CONFIGS_JSON | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > configs.env
          source configs.env

          # Find all YAML files to process
          YAML_FILES=$(find . -name '*.yaml')
          echo "YAML files to process: $YAML_FILES"
          
          # Loop through each config and replace in files
          for config in $(cat configs.env); do
            config_name=$(echo "$config" | cut -d '=' -f 1)
            config_value=$(echo "$config" | cut -d '=' -f 2)
            config_placeholder="{{${config_name}}}"

            echo "Replacing $config_placeholder with $config_value in all YAML files"

            for file in $YAML_FILES; do
              echo "Processing $file"
              if grep -q "$config_placeholder" "$file"; then
                sed -i "s/$config_placeholder/$config_value/g" "$file"
              fi
            done
          done
        else
          echo "No configurations to process, skipping replacement step."
        fi
      shell: bash
    - name: Create Package
      run: |
        cd ${{ inputs.project_path }}
        meadow app build
        meadow cloud package create -v "${{ inputs.os_version }}"
        PACKAGE_PATH=$(find . -name '*.mpak')
        echo "PACKAGE_PATH=${PACKAGE_PATH}" >> $GITHUB_ENV
        echo "Package created at ${PACKAGE_PATH}"
      shell: bash   
    - name: Upload Package
      run: |
        cd ${{ inputs.project_path }}
        DESCRIPTION="Build for ${GITHUB_REF_NAME} at commit ${GITHUB_SHA::8} on $(date +'%Y-%m-%d %H:%M:%S')"
        HOST_PARAM=""
        if [[ -n "${{ inputs.host }}" ]]; then
          HOST_PARAM="--host ${{ inputs.host }}"
        fi
        OUTPUT=$(meadow cloud package upload "${PACKAGE_PATH}" -o "${{ inputs.organization_id }}" -d "$DESCRIPTION" --apikey "${{ inputs.api_key }}" $HOST_PARAM)
        PACKAGE_ID=$(echo "$OUTPUT" | grep "Package Id:" | awk '{print $NF}')
        echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
      shell: bash
